name: Auto Publish when build.txt updated on Master
on:
  push:
    branches:
    - master
    
jobs:
  build:
    name: Hello world action
    runs-on: ubuntu-latest    
    steps:
    - uses: actions/checkout@master
    - run: python -c "import sys; print sys.version"
    - uses: actions/setup-python@v1
      with:
        python-version: '3.x'
        architecture: 'x64'
    - run: python -c "import sys; print(sys.version)"  
    - shell: python
      run: |    
        import sys
        print(sys.version)
    - name: Check build.txt version
      shell: python
      run: |
        #import sys
        #print(sys.version)
        import urllib2
        from distutils.version import LooseVersion
        modBrowserVersionString = urllib2.urlopen("http://javid.ddns.net/tModLoader/tools/latestmodversionsimple.php?modname=BossChecklist").read().decode('utf-8')
        modBrowserVersion = LooseVersion(modBrowserVersionString[1:]) # v1.0
        print "Mod Browser version: " + str(modBrowserVersion)
        with open("build.txt") as fh:
          for line in fh:
              if line.startswith("version"):  # version = 1.0
                  buildVersion = line[line.index('=') + 1:].strip()
                  print line
        print "build.txt version: " + str(buildVersion)
        print "Comparing versions: " + str(modBrowserVersion) + " < " + str(buildVersion)
        if modBrowserVersion < buildVersion:
            print "build.txt version newer. Update needed"
            exit(0)
        else:
            print "Mod Browser up-to-date. No need to update."
            exit(1)
    - name: Build Mod
      env:
        MY_NAME: "TestMan2"
      run: |
        echo Hello world my name is $MY_NAME
        echo checking mono version
        mono -V
        echo pwd is: ${PWD}
        echo ls -l is:
        ls -l
        echo CD to Home
        cd $HOME
        echo pwd is: ${PWD}
        echo ls -l is:
        ls -l
        echo Copy Workspace to correct foldername for build
        cp -r $GITHUB_WORKSPACE TutorialMod
        echo Downloading Terraria Server
        curl -L http://terraria.org/server/terraria-server-1353.zip -o TerrariaServer.zip
        unzip ./TerrariaServer.zip -d ./TerrariaServer
        mkdir tModLoader
        mv TerrariaServer/1353/Linux/* ./tModLoader
        echo Downloading tModLoader
        curl -L https://github.com/tModLoader/tModLoader/releases/download/v0.11.4/tModLoader.Linux.v0.11.4.zip -o tModLoader.Linux.v0.11.4.zip
        unzip tModLoader.Linux.v0.11.4.zip -d ./tModLoader
        echo Downloading ModCompile
        curl -L https://github.com/tModLoader/tModLoader/releases/download/v0.11.4/ModCompile_XNA.zip -o ModCompile.zip
        mkdir tModLoader/ModCompile
        unzip ModCompile.zip -d ./tModLoader/ModCompile
        echo Upgrade to tModLoader-mono
        cp ./tModLoader/tModLoader-mono ./tModLoader/tModLoaderServer
        echo pwd is: ${PWD}
        echo ls -l is:
        ls -l
        echo CD to tModLoader 
        cd tModLoader
        chmod +x tModLoaderServer
        chmod +x Terraria
        echo pwd is: ${PWD}
        echo ls -l is:
        ls -l
        echo cd back to Home
        cd $HOME
        echo Now to build the mod:
        $HOME/tModLoader/tModLoaderServer -tmlsavedirectory ../ModLoader -build ../TutorialMod
        cd ModLoader/Mods
        echo pwd is:
        pwd
        echo ls -l is:
        ls -l

#  otherjob:
#    name: This is the name of the other job
#    runs-on: ubuntu-latest
#    steps:
#    - name: Discord notification
#      env:
#        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
#      uses: Ilshidur/action-discord@0.0.2
#      with:
#        args: 'The project has been deployed.'


